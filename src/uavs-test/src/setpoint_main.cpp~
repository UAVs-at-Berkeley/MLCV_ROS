#include "ros/ros.h"

#include <cstdlib>
#include <string>

//Include Message Types Used
#include <geometry_msgs/PoseStamped.h>
#include <mavros_msgs/OverrideRCIn.h>
#include <mavros_msgs/State.h>
#include <mavros_msgs/VFR_HUD.h>
#include <mavros_msgs/RCIn.h>
#include <mavros_msgs/SetMode.h>
#include <mavros_msgs/CommandBool.h>
#include <mavros_msgs/CommandTOL.h>

//for keeping track of our current state details
mavros_msgs::State current_state;

void state_cb(const mavros_msgs::State::ConstPtr& msg)
{
	current_state = *msg;
}

int main(int argc, char **argv) 
{
    ros::init(argc, argv, "StptNode");
    ros::NodeHandle nh;

    ros::Subscriber state_sub = nh.subscribe<mavros_msgs::State>("mavros/state", 10, state_cb);
    ros::Publisher local_pos_pub = nh.advertise<geometry_msgs::PoseStamped>("mavros/setpoint_position/local", 10);
    ros::ServiceClient arming_client = nh.serviceClient<mavros_msgs::CommandBool>("mavros/cmd/arming");
    ros::ServiceClient mode_client = nh.serviceClient<mavros_msgs::SetMode>("mavros/set_mode");
    
    ros::ServiceClient land_cl = nh.serviceClient<mavros_msgs::CommandTOL>("/mavros/cmd/land", 10);

    ros::Rate rate(20.0);

    while(ros::ok() && current_state.connected) {
        ros::spinOnce();
        rate.sleep();
    }

    //create a setpoint

    geometry_msgs::PoseStamped pose;
    pose.pose.position.x = 0;
    pose.pose.position.y = 0;
    pose.pose.position.z = 2;

    //send a few before arming
    for(int i = 0; i < 10; i++) {
        local_pos_pub.publish(pose);
        ros::spinOnce();
        rate.sleep();
    }

    mavros_msgs::CommandBool arm_cmd;
    arm_cmd.request.value = true;

    mavros_msgs::SetMode set_guided_cmd;
    set_guided_cmd.request.custom_mode = "GUIDED";

    while(ros::ok() && !(mode_client.call(set_guided_cmd) && set_guided_cmd.response.success)) {
        ros::spinOnce();
        rate.sleep();
    }
    ROS_INFO("Mode Changed to GUIDED");
    while(ros::ok() && !(arming_client.call(arm_cmd) && arm_cmd.response.success)) {
        ros::spinOnce();
        rate.sleep();
    }
    ROS_INFO("Quad Armed");

    //send a few before arming
    for(int i = 0; i < 10; i++) {
        local_pos_pub.publish(pose);
        ros::spinOnce();
        rate.sleep();
    }

    sleep(5); //hopefully this is enough time

    //Landing procedure here
    mavros_msgs::CommandTOL srv_land;
    srv_land.request.altitude = 2;
    srv_land.request.latitude = 0;
    srv_land.request.longitude = 0;
    srv_land.request.min_pitch = 0;
    srv_land.request.yaw = 0;

    while(ros::ok() && !(land_cl.call(srv_land) && srv_land.response.success)) {
        ros::spinOnce();
        rate.sleep();
    }
    ROS_INFO("Quad Landed");
}

